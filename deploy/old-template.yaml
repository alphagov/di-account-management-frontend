AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  This creates the necessary components to deploy the Account Management 
  Frontend onto ECS Fargate.
  Account Management Frontend can be invoked via the public API Gateway 
  on the url in the AddressFrontUrl output.
  The ingress route in summary is: API Gateway -> VPC link -> Private ALB ->
  Account Management Frontend ECS Service

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
    Default: "vpc"

  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

  Environment:
    Description: "The name of the environment to deploy to"
    Type: "String"
    Default: build
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"

  IncomingTrafficCIDRBlocks:
    Description: The list of CIDR blocks allowed to send requests to the ALB
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Conditions:
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Mappings:
  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

Resources:
  #
  # Fargate Cluster
  #

  ContainerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub "${Environment}-accounts-ecs-cluster"
      DeploymentController:
        Type: EXTERNAL
      PropagateTags: SERVICE
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-accounts-ecs-service"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: "account management frontend"
        - Key: Owner
          Value: "govuk-accounts-tech@digital.cabinet-office.gov.uk"
        - Key: Source
          Value: "alphagov/di-authentication-account-management/template.yaml"
    DependsOn: "ApplicationLoadBalancerListener"

    #  ContainerService:
    #    Type: AWS::ECS::Service
    #    Properties:
    #      Cluster:
    #        Fn::ImportValue:
    #          !Sub "${Environment}-accounts-ecs-cluster"
    #      DeploymentConfiguration:
    #        MaximumPercent: 150
    #        MinimumHealthyPercent: 50
    #      DesiredCount: 2
    #      HealthCheckGracePeriodSeconds: 15
    #      LaunchType: "FARGATE"
    #      LoadBalancers:
    #        - ContainerName: !Sub "${Environment}-aam-ecs-container-definition"
    #          ContainerPort: 6001
    #          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
    #      NetworkConfiguration:
    #        AwsvpcConfiguration:
    #          AssignPublicIp: "DISABLED"
    #          SecurityGroups:
    #            - !GetAtt AccountManagementEcsTaskSecurityGroup.GroupId #TODO Confirm that this is the correct one
    #          Subnets:
    #            - Fn::ImportValue:
    #                !Sub "${VpcStackName}-PrivateSubnetIdA"
    #            - Fn::ImportValue:
    #                !Sub "${VpcStackName}-PrivateSubnetIdB"
    #      ServiceName: !Sub "${Environment}-accounts-ecs-service"
    #      TaskDefinition: !Ref TaskDefinition
    #      Tags:
    #        - Key: Name
    #          Value: !Sub "${Environment}-accounts-ecs-service"
    #        - Key: Product
    #          Value: "GOV.UK Sign In"
    #        - Key: System
    #          Value: "Account Management"
    #        - Key: Service
    #          Value: "account management frontend"
    #        - Key: Owner
    #          Value: "govuk-accounts-tech@digital.cabinet-office.gov.uk"
    #        - Key: Source
    #          Value: "alphagov/di-authentication-account-management/template.yaml"
    ##    DependsOn: ApplicationLoadBalancerListenerHTTPS

  ContainerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to access the Container Service
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ContainerService
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      SecurityGroupIngress:
        - Description: Allow traffic from the load balancer on port 6001
          SourceSecurityGroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 6001
          ToPort: 6001
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerServiceSecurityGroup"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-devplatform-demo-sam-app/sam-app3/template.yaml


#  ContainerAutoScalingTarget:
#    Type: AWS::ApplicationAutoScaling::ScalableTarget
#    Properties:
#      MaxCapacity: 4
#      MinCapacity: 2
#      ResourceId: !Join
#        - '/'
#        - - "service"
#          - Fn::ImportValue:
#              !Sub "${Environment}-accounts-ecs-cluster"
#          - !GetAtt ContainerService.Name
#      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
#      ScalableDimension: "ecs:service:DesiredCount"
#      ServiceNamespace: "ecs"

#  ContainerAutoScalingPolicyMemory:
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#    Properties:
#      PolicyName: !Sub "${Environment}-aam-auto-scaling-policy-memory"
#      PolicyType: "TargetTrackingScaling"
#      ResourceId: !Join
#        - '/'
#        - - "service"
#          - Fn::ImportValue:
#              !Sub "${Environment}-accounts-ecs-cluster"
#          - !GetAtt ContainerService.Name
#      ScalableDimension: "ecs:service:DesiredCount"
#      ServiceNamespace: "ecs"
#      TargetTrackingScalingPolicyConfiguration:
#        TargetValue: 75.0
#        PredefinedMetricSpecification:
#          PredefinedMetricType: "ECSServiceAverageMemoryUtilization"
#    DependsOn: ContainerAutoScalingTarget

#  ContainerAutoScalingPolicyCPU:
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#    Properties:
#      PolicyName: !Sub "${Environment}-aam-auto-scaling-policy-cpu"
#      PolicyType: "TargetTrackingScaling"
#      ResourceId: !Join
#        - '/'
#        - - "service"
#          - Fn::ImportValue:
#              !Sub "${Environment}-accounts-ecs-cluster"
#          - !GetAtt ContainerService.Name
#      ScalableDimension: "ecs:service:DesiredCount"
#      ServiceNamespace: "ecs"
#      TargetTrackingScalingPolicyConfiguration:
#        TargetValue: 65.0
#        PredefinedMetricSpecification:
#          PredefinedMetricType: "ECSServiceAverageCPUUtilization"
#    DependsOn: ContainerAutoScalingTarget

  AmFrontendRedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ingress to AM frontend Redis. Use on Elasticache cluster only
      GroupName: !Join
        - "-"
        - - !Ref Environment
          - "am-frontend-redis-security-group"
      SecurityGroupIngress:
        - Description: Allow incoming AM frontend redis from private subnet
          FromPort: 6379
          IpProtocol: tcp
          CidrIp: 10.0.10.0/23
          ToPort: 6379
        - Description: Allow incoming AM frontend redis from private subnet
          FromPort: 6379
          IpProtocol: tcp
          CidrIp: 10.0.12.0/23
          ToPort: 6379
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: "Account Management"

  AllowAccessToAmFrontendRedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outgoing access to the Account Management frontend Redis session store
      GroupName: !Join
        - "-"
        - - !Ref Environment
          - "allow-access-to-acct-mgmt-frontend-redis"
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: "Account Management"

  AllowAccessToAmFrontendRedisEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow connection to AM frontend redis
      DestinationSecurityGroupId: !GetAtt AmFrontendRedisSecurityGroup.GroupId
      FromPort: 6379
      GroupId: !GetAtt AllowAccessToAmFrontendRedisSecurityGroup.GroupId
      IpProtocol: tcp
      ToPort: 6379

  AccountManagementAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Account Management ALB
      GroupName: !Join
        - "-"
        - - !Ref Environment
          - "account-management-alb-sg"
      SecurityGroupIngress:
        - Description: Allow ALB HTTP ingress from anywhere
          FromPort: 80
          IpProtocol: tcp
          CidrIp: !Ref IncomingTrafficCIDRBlocks
          ToPort: 80
        - Description: Allow ALB HTTP ingress from anywhere
          FromPort: 443
          IpProtocol: tcp
          CidrIp: !Ref IncomingTrafficCIDRBlocks
          ToPort: 443
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: "Account Management"

  AccountManagementAlbEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow ALB application egress to task group
      DestinationSecurityGroupId: !GetAtt AccountManagementEcsTaskSecurityGroup.GroupId
      FromPort: 6001
      GroupId: !GetAtt AccountManagementAlbSecurityGroup.GroupId
      IpProtocol: tcp
      ToPort: 6001

  AccountManagementEcsTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Account Management ECS Task Definition
      GroupName: !Join
        - "-"
        - - !Ref Environment
          - "account-management-ecs-task-sg"
      SecurityGroupIngress:
        - Description: Allow ECS task igress from ALB
          FromPort: 6001
          IpProtocol: tcp
          ToPort: 6001
          SourceSecurityGroupId: !GetAtt AccountManagementAlbSecurityGroup.GroupId
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: "Account Management"

  #
  # Fargate tasks
  #

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          Name: !Sub "${Environment}-aam-ecs-container-definition"
          Essential: true
          Image: 301577035144.dkr.ecr.eu-west-2.amazonaws.com/app-container-repository-containerrepository-neycck3munxf:latest
          PortMappings:
            - ContainerPort: "6001"
              HostPort: "6001"
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group : !Ref TaskLogsGroup
              awslogs-region : !Sub ${AWS::Region}
              awslogs-stream-prefix : !Sub ${AWS::StackName}-${Environment}
              awslogs-create-group: "true"
          Environment:
            - Name: "NODE_ENV"
              Value: "production"
            - Name: "APP_ENV"
              Value: !Sub "${Environment}"
            - Name: "FARGATE"
              Value: "1"
            - Name: "API_BASE_URL"
              Value: "NULL" #TODO Fill when value is available
            - Name: "AM_API_BASE_URL"
              Value: "NULL" #TODO Fill when value is available
            - Name: "BASE_URL"
              Value: "NULL" #TODO Fill when value is available
            - Name: "OIDC_CLIENT_ID"
              Value: "NULL" #TODO Fill when value is available
            - Name: "OIDC_CLIENT_SCOPES"
              Value: "NULL" #TODO Fill when value is available
            - Name: "SESSION_EXPIRY"
              Value: "1800000"
            - Name: "SESSION_SECRET"
              Value:
                '{{resolve:secretsmanager:arn:aws:secretsmanager:eu-west-2:301577035144:secret:shared-redis-cache-password-7Byad7}}'
            - Name: "AM_YOUR_ACCOUNT_URL"
              Value: !Sub "https://www.${Environment}.publishing.service.gov.uk/account/home"
            - Name: "GTM_ID"
              Value: ""
            - Name: "GOV_ACCOUNTS_PUBLISHING_API_URL"
              Value: ""
            - Name: "GOV_ACCOUNTS_PUBLISHING_API_TOKEN"
              Value: ""
            - Name: "SUPPORT_INTERNATIONAL_NUMBERS"
              Value: "0"
            - Name: "SUPPORT_LANGUAGE_CY"
              Value: "1"
            - Name: "AUTH_FRONTEND_URL"
              Value: "NULL" #TODO Fill when value is available
            - Name: "ANALYTICS_COOKIE_DOMAIN"
              Value: "NULL" #TODO Fill when value is available
            - Name: "REDIS_KEY"
              Value: "account-management-frontend" #TODO Confirm value
            - Name: "KMS_KEY_ID"
              Value:
                Fn::ImportValue:
                  !Sub "account-management-kms-signing-key-id"
            - Name: "SERVICE_DOMAIN"
              Value: "" #TODO Fill when value is available
      Cpu: "1024"
      ExecutionRoleArn:
        Fn::ImportValue:
          !Sub "${Environment}-accounts-ecs-cluster-execution-role"
      Family: !Sub "${Environment}-aam-ecs-task-definition"
      Memory: "2048"
      NetworkMode: "awsvpc"
      TaskRoleArn:
        Fn::ImportValue:
          !Sub "${Environment}-accounts-ecs-cluster-task-role"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-aam-ecs-task-definition"
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Authentication Account Management
        - Key: Service
          Value: Authentication Account Management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

  TaskLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt KmsKey.Arn
      LogGroupName: !Sub "${Environment}-aam-ecs-access-logs-group"
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-aam-ecs-access-logs-group"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: "account management frontend"
        - Key: Owner
          Value: "govuk-accounts-tech@digital.cabinet-office.gov.uk"
        - Key: Source
          Value: "alphagov/di-authentication-account-management/template.yaml"

  #
  # API Gateway
  #

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: node-server-endpoint
      ProtocolType: HTTP
      Tags:
        Name: !Sub "${AWS::StackName}-aam-gateway"
        Product: "GOV.UK Sign In"
        System: "Account Management"
        Service: account management frontend
        Owner: govuk-accounts-tech@digital.cabinet-office.gov.uk
        Source: alphagov/di-authentication-account-management/template.yaml

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref ApplicationLoadBalancerListener
      PayloadFormatVersion: 1.0

  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${ApiGatewayIntegration}"

  ApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      AutoDeploy: true
      AccessLogSettings:
        Format: "$context.requestId $context.httpMethod $context.path"
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
      Tags:
        Name: !Sub "${AWS::StackName}-ApiDefaultStage"
        Product: "GOV.UK Sign In"
        System: "Account Management"
        Service: account management frontend
        Owner: govuk-accounts-tech@digital.cabinet-office.gov.uk
        Source: alphagov/di-authentication-account-management/template.yaml

  #
  # Load balancing
  #

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Environment}-aam-loadbalancer"
      Scheme: internal
      Type: application
      SecurityGroups:
        - !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdB"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancer"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

#  ApplicationLoadBalancerTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      HealthCheckEnabled: true
#      HealthCheckIntervalSeconds: 30
#      HealthCheckPath: "/healthcheck"
#      HealthCheckPort: "80"
#      HealthCheckProtocol: "HTTP"
#      HealthCheckTimeoutSeconds: 3
#      HealthyThresholdCount: 3
#      UnhealthyThresholdCount: 2
#      Matcher:
#        HttpCode: "200"
#      TargetType: "ip"
#      Name: !Sub "${Environment}-aam-target-group"
#      Port: 80
#      Protocol: "HTTP"
#      ProtocolVersion: "HTTP1"
#      TargetType: "ip"


  ApplicationLoadBalancerTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: 6001
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Port: 6001
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Matcher:
        HttpCode: "200-499"
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: "5"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerTargetGroup"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml


  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled.
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroupBlue
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"

      #      Certificates: !Ref ACMCertificate
      #        - TODO: Create certificate (aws_acm_certificate.account_management_alb_certificate.arn)
      #      Port: 443
      #      Protocol: "HTTPS"
      #      SslPolicy: "ELBSecurityPolicy-FS-1-2-Res-2020-10"

  #  ACMCertificate:
#    Type: AWS::CertificateManager::Certificate
#    Properties:
#      DomainName: "*"

#  ApplicationLoadBalancerListenerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    Properties:
#      Actions:
#        - Type: fixed-response
#          FixedResponseConfig:
#            ContentType: "text/plain"
#            MessageBody: "static/robots.txt"
#            StatusCode: "200"
#      Conditions:
#        - PathPatternConfig:
#            Values: ["/robots.txt"]
#      ListenerArn: !Ref ApplicationLoadBalancerListener
#      Priority: 10

  ApplicationLoadBalancerListenerRuleForward:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroupBlue
                Weight: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 1

#  ApplicationLoadBalancerListenerHTTP:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
#      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled.
#      DefaultActions:
#        - Type: redirect
#          RedirectConfig:
#            Port: "443"
#            Protocol: "HTTPS"
#            StatusCode: "HTTP_301"
#      LoadBalancerArn: !Ref ApplicationLoadBalancer
#      Port: 80
#      Protocol: "HTTP"

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Application Load Balancer
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ApplicationLoadBalancer
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerSecurityGroup"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

  ApplicationLoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      CidrIp: 10.0.0.0/16
      Description: Allow traffic from the VPC on port 80
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  ApplicationLoadBalancerSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt AccountManagementAlbSecurityGroup.GroupId #TODO Confirm this is the correct one
      Description: Allow traffic to Container Service on port 6001
      IpProtocol: tcp
      FromPort: 6001
      ToPort: 6001

  #
  # Logging
  #

  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      KmsKeyId: !GetAtt KmsKey.Arn
      Tags:
        - Key: Name
          Value: ApiGatewayAccessLogGroup
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_18:This is the access logs bucket. It should not log itself.
      BucketName: !Join
        - "-"
        - - !Ref AWS::StackName
          - logs
          - Fn::Select:
              - 4
              - Fn::Split:
                  - '-'
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - /
                          - Ref: AWS::StackId
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-accesslogs"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLoadBalancerToLogToS3
            Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              Bool:
                "aws:SecureTransport": true
          - Sid: AllowAwsLogDeliveryToLogToS3
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
                "aws:SourceAccount": !Ref AWS::AccountId
              Bool:
                "aws:SecureTransport": true
          - Sid: AllowAwsLogDeliveryToReadBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !GetAtt AccessLogsBucket.Arn
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              Bool:
                "aws:SecureTransport": true

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-kmskey"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

Outputs:
  ApiGatewayEndpoint:
    Description: The base URI for this application.
    Value: !GetAtt ApiGateway.ApiEndpoint
