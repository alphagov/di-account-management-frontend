AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  This creates the necessary components to deploy the Account Management 
  Frontend onto ECS Fargate.
  Account Management Frontend can be invoked via the public API Gateway 
  on the url in the AddressFrontUrl output.
  The ingress route in summary is: API Gateway -> VPC link -> Private ALB ->
  Account Management Frontend ECS Service

Parameters:
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
    Default: "vpc"

  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

Conditions:
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Mappings:
  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 301577035144

Resources:
  #
  # Fargate cluster
  #

#  FargateCluster:
#    Type: AWS::ECS::Cluster
#    Properties:
#      ClusterSettings:
#        - Name: containerInsights
#          Value: enabled
#      Tags:
#        - Key: Name
#          Value: !Sub "${AWS::StackName}-FargateCluster"
#        - Key: Product
#          Value: "GOV.UK Sign In"
#        - Key: System
#          Value: "Account Management"
#        - Key: Service
#          Value: account management frontend
#        - Key: Owner
#          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
#        - Key: Source
#          Value: alphagov/di-authentication-account-management/template.yaml

  ContainerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub "${Environment}-accounts-ecs-cluster"
      DeploymentConfiguration:
        MaximumPercent: 150
        MinimumHealthyPercent: 50
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 15
      LaunchType: "FARGATE"
      LoadBalancers:
        - ContainerName: "aam-application"
          ContainerPort: 6001
          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "DISABLED"
          SecurityGroups:
            - !GetAtt ContainerServiceSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdB"
      SchedulingStrategy: String
      ServiceName: !Sub "${Environment}-accounts-ecs-service"
      TaskDefinition: !Ref TaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-accounts-ecs-service"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: "account management frontend"
        - Key: Owner
          Value: "govuk-accounts-tech@digital.cabinet-office.gov.uk"
        - Key: Source
          Value: "alphagov/di-authentication-account-management/template.yaml"
    DependsOn: ApplicationLoadBalancerListener

  ContainerAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 2
      ResourceId: !Join
        - '/'
        - - "service"
          - Fn::ImportValue:
              !Sub "${Environment}-accounts-ecs-cluster"
          - !GetAtt ContainerService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"

  ContainerAutoScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${Environment}-aam-auto-scaling-policy-memory"
      PolicyType: "TargetTrackingScaling"
      ResourceId: !Join
        - '/'
        - - "service"
          - Fn::ImportValue:
              !Sub "${Environment}-accounts-ecs-cluster"
          - !GetAtt ContainerService.Name
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0
        PredefinedMetricSpecification:
          PredefinedMetricType: "ECSServiceAverageMemoryUtilization"
    DependsOn: ContainerAutoScalingTarget

  ContainerAutoScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${Environment}-aam-auto-scaling-policy-cpu"
      PolicyType: "TargetTrackingScaling"
      ResourceId: !Join
        - '/'
        - - "service"
          - Fn::ImportValue:
              !Sub "${Environment}-accounts-ecs-cluster"
          - !GetAtt ContainerService.Name
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 65.0
        PredefinedMetricSpecification:
          PredefinedMetricType: "ECSServiceAverageCPUUtilization"
    DependsOn: ContainerAutoScalingTarget

  ContainerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to access the Container Service
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ContainerService
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      SecurityGroupIngress:
        - Description: Allow traffic from the load balancer on port 8080
          SourceSecurityGroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerServiceSecurityGroup"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

  #
  # Fargate tasks
  #

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        Name: !Sub "${Environment}-aam-ecs-container-definition"
        Essential: true
        Image: CONTAINER-IMAGE-PLACEHOLDER #TODO Provide container image
        PortMappings:
          - ContainerPort: "6001"
            HostPort: "6001"
            Protocol: tcp
        LogConfiguration:
          - LogDriver: awslogs
            Options:
              awslogs-group : !Ref ECSAccessLogsGroup #TODO Create ECS Access Logs Group
              awslogs-region : !Sub ${AWS::Region}
              awslogs-stream-prefix : !Sub ${ApplicationName}-${Environment}
              awslogs-create-group: "true"
        Environment:
          - Name: "NODE_ENV"
            Value: "production"
          - Name: "APP_ENV"
            Value: !Sub "${Environment}"
          - Name: "FARGATE"
            Value: "1"
          - Name: "API_BASE_URL"
            Value: "NULL" #TODO Fill when value is available
          - Name: "AM_API_BASE_URL"
            Value: "NULL" #TODO Fill when value is available
          - Name: "BASE_URL"
            Value: "NULL" #TODO Fill when value is available
          - Name: "OIDC_CLIENT_ID"
            Value: "NULL" #TODO Fill when value is available
          - Name: "OIDC_CLIENT_SCOPES"
            Value: "NULL" #TODO Fill when value is available
          - Name: "SESSION_EXPIRY"
            Value: "1800000"
          - Name: "SESSION_SECRET"
            Value: "NULL" #TODO Create Session Secret value and pass through
          - Name: "AM_YOUR_ACCOUNT_URL"
            Value: !Sub "https://www.${Environment}.publishing.service.gov.uk/account/home"
          - Name: "GTM_ID"
            Value: ""
          - Name: "GOV_ACCOUNTS_PUBLISHING_API_URL"
            Value: ""
          - Name: "GOV_ACCOUNTS_PUBLISHING_API_TOKEN"
            Value: ""
          - Name: "SUPPORT_INTERNATIONAL_NUMBERS"
            Value: "0"
          - Name: "SUPPORT_LANGUAGE_CY"
            Value: "1"
          - Name: "AUTH_FRONTEND_URL"
            Value: "NULL" #TODO Fill when value is available
          - Name: "ANALYTICS_COOKIE_DOMAIN"
            Value: "NULL" #TODO Fill when value is available
          - Name: "REDIS_KEY"
            Value: "account-management-frontend" #TODO Confirm value
          - Name: "KMS_KEY_ID"
            Value:
              Fn::ImportValue:
                !Sub "account-management-kms-signing-key-id"
          - Name: "SERVICE_DOMAIN"
            Value: "" #TODO Fill when value is available
      Cpu: "1024"
      ExecutionRoleArn:
        Fn::ImportValue:
          !Sub "${Environment}-accounts-ecs-cluster-execution-role"
      Family: !Sub "${Environment}-aam-ecs-task-definition"
      Memory: "2048"
      NetworkMode: "awsvpc"
      TaskRoleArn:
        Fn::ImportValue:
          !Sub "${Environment}-accounts-ecs-cluster-task-role"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-aam-ecs-task-definition"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

#  TaskExecutionRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: ecs-tasks.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      ManagedPolicyArns:
#        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
#      Policies:
#        - PolicyName: CreateLogGroup
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              - Effect: Allow
#                Action:
#                  - logs:CreateLogGroup
#                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
#      PermissionsBoundary:
#        - UsePermissionsBoundary
#        - !Ref PermissionsBoundary
#        - !Ref AWS::NoValue
#      Tags:
#        - Key: Name
#          Value: !Sub "${AWS::StackName}-TaskExecutionRole"
#        - Key: Product
#          Value: "GOV.UK Sign In"
#        - Key: System
#          Value: "Account Management"
#        - Key: Service
#          Value: account management frontend
#        - Key: Owner
#          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
#        - Key: Source
#          Value: alphagov/di-authentication-account-management/template.yaml

  #
  # API Gateway
  #

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: node-server-endpoint
      ProtocolType: HTTP
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApiGateway"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml
  
  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref ApplicationLoadBalancerListener
      PayloadFormatVersion: 1.0

  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${ApiGatewayIntegration}"

  ApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      AutoDeploy: true
      AccessLogSettings:
        Format: "$context.requestId $context.httpMethod $context.path"
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
      Tags:
        - Key: Name 
          Value: !Sub "${AWS::StackName}-ApiDefaultStage"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

  #
  # Load balancing
  #

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Environment}-aam-loadbalancer"
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdB"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancer"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

  ApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/healthcheck"
      HealthCheckPort: "80"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      TargetType: "ip"
      Name: !Sub "${Environment}-aam-target-group"
      Port: 80
      Protocol: "HTTP"
      ProtocolVersion: "HTTP1"
      TargetType: "ip"
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerTargetGroup"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

  ApplicationLoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled.
      Certificates:
#        - TODO: Create certificate (aws_acm_certificate.account_management_alb_certificate.arn)
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-FS-1-2-Res-2020-10"

  ApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "static/robots.txt" # TODO Confirm what this is meant to be
            StatusCode: "200"
      Conditions:
        - PathPatternConfig:
            Values: ["/robots.txt"]
      ListenerArn: !Ref ApplicationLoadBalancerListenerHTTPS
      Priority: 10

  ApplicationLoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled.
      DefaultActions:
        - RedirectConfig:
            Port: "443"
            Protocol: "HTTPS"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Application Load Balancer
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ApplicationLoadBalancer
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerSecurityGroup"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

  ApplicationLoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      CidrIp: 10.0.0.0/16
      Description: Allow traffic from the VPC on port 80
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  ApplicationLoadBalancerSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt ContainerServiceSecurityGroup.GroupId
      Description: Allow traffic to Container Service on port 8080
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080

  #
  #  ElastiCache
  #

#  ApplicationCacheSubnetGroup:
#    Type: AWS::ElastiCache::SubnetGroup
#    Properties:
#      CacheSubnetGroupName: application-cache-subnet-group
#      Description: Cache Subnet Group
#      SubnetIds:
#        - Fn::ImportValue:
#            !Sub "${VpcStackName}-PrivateSubnetIdA"
#        - Fn::ImportValue:
#            !Sub "${VpcStackName}-PrivateSubnetIdB"
#      Tags:
#        - Key: Name
#          Value: ApplicationCacheSubnetGroup
#        - Key: Product
#          Value: "GOV.UK Sign In"
#        - Key: System
#          Value: "Account Management"
#        - Key: Service
#          Value: account management frontend
#        - Key: Owner
#          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
#        - Key: Source
#          Value: alphagov/di-authentication-account-management/template.yaml

#  ApplicationParameterGroup:
#    Type: AWS::ElastiCache::ParameterGroup
#    Properties:
#      CacheParameterGroupFamily: redis6.x
#      Description: Hello! This is a nice description
#      Properties:
#        cluster-enabled: "yes"
#      Tags:
#        - Key: Name
#          Value: ApplicationElastiCacheCluster
#        - Key: Product
#          Value: "GOV.UK Sign In"
#        - Key: System
#          Value: "Account Management"
#        - Key: Service
#          Value: account management frontend
#        - Key: Owner
#          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
#        - Key: Source
#          Value: alphagov/di-authentication-account-management/template.yaml

#  ApplicationElastiCacheLogGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      KmsKeyId: !GetAtt KmsKey.Arn
#      LogGroupName: elasticache-replication-group-logs
#      RetentionInDays: 1
#      Tags:
#        - Key: Name
#          Value: ApplicationElastiCacheCluster
#        - Key: Product
#          Value: "GOV.UK Sign In"
#        - Key: System
#          Value: "Account Management"
#        - Key: Service
#          Value: account management frontend
#        - Key: Owner
#          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
#        - Key: Source
#          Value: alphagov/di-authentication-account-management/template.yaml

#  ApplicationAuthPass:
#    Type: AWS::SecretsManager::Secret
#    Properties:
#      Name: elasticache-application
#      Description: Random password for elastiCache
#      GenerateSecretString:
#        ExcludeLowercase: false
#        ExcludeNumbers: false
#        ExcludePunctuation: true
#        ExcludeUppercase: false
#        IncludeSpace: false
#        PasswordLength: 17
#      KmsKeyId: !GetAtt KmsKey.Arn
#      Tags:
#        - Key: Name
#          Value: ApplicationAuthPass
#        - Key: Product
#          Value: "GOV.UK Sign In"
#        - Key: System
#          Value: "Account Management"
#        - Key: Service
#          Value: account management frontend
#        - Key: Owner
#          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
#        - Key: Source
#          Value: alphagov/di-authentication-account-management/template.yaml

#  ApplicationReplicationGroup:
#    Type: AWS::ElastiCache::ReplicationGroup
#    Properties:
#      TransitEncryptionEnabled: true
#      AtRestEncryptionEnabled: true
#      AuthToken: !Sub '{{resolve:secretsmanager:${ApplicationAuthPass}}}'
#      AutomaticFailoverEnabled: true
#      CacheNodeType: cache.t2.micro
#      CacheSubnetGroupName: !Ref ApplicationCacheSubnetGroup
#      CacheParameterGroupName: !Ref ApplicationParameterGroup
#      Engine: redis
#      LogDeliveryConfigurations:
#        - DestinationDetails:
#            CloudWatchLogsDetails:
#              LogGroup: !Ref ApplicationElastiCacheLogGroup
#          DestinationType: cloudwatch-logs
#          LogFormat: json
#          LogType: engine-log
#      MultiAZEnabled: true
#      NumNodeGroups: 1
#      ReplicasPerNodeGroup: 1
#      ReplicationGroupDescription: Replication group for elasticache
#      SecurityGroupIds:
#        - Fn::ImportValue:
#            !Sub "${VpcStackName}-AWSServicesEndpointSecurityGroupId"
#      Tags:
#        - Key: Name
#          Value: ApplicationElastiCacheCluster
#        - Key: Product
#          Value: "GOV.UK Sign In"
#        - Key: System
#          Value: "Account Management"
#        - Key: Service
#          Value: account management frontend
#        - Key: Owner
#          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
#        - Key: Source
#          Value: alphagov/di-authentication-account-management/template.yaml

  #
  # Logging
  #

  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      KmsKeyId: !GetAtt KmsKey.Arn
      Tags:
        - Key: Name
          Value: ApiGatewayAccessLogGroup
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_18:This is the access logs bucket. It should not log itself.
      BucketName: !Join
        - "-"
        - - !Ref AWS::StackName
          - logs
          - Fn::Select:
              - 4
              - Fn::Split:
                  - '-'
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - /
                          - Ref: AWS::StackId
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-accesslogs"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLoadBalancerToLogToS3
            Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
          - Sid: AllowAwsLogDeliveryToLogToS3
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
                "aws:SourceAccount": !Ref AWS::AccountId
          - Sid: AllowAwsLogDeliveryToReadBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !GetAtt AccessLogsBucket.Arn
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-kmskey"
        - Key: Product
          Value: "GOV.UK Sign In"
        - Key: System
          Value: "Account Management"
        - Key: Service
          Value: account management frontend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Source
          Value: alphagov/di-authentication-account-management/template.yaml

Outputs:
  ApiGatewayEndpoint:
    Description: The base URI for this application.
    Value: !GetAtt ApiGateway.ApiEndpoint
