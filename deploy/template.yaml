AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  This creates the necessary components to deploy the Account Management
  Frontend onto ECS Fargate.
  Account Management Frontend can be invoked via the public API Gateway
  on the url in the AddressFrontUrl output.
  The ingress route in summary is: API Gateway -> VPC link -> Private ALB ->
  Account Management Frontend ECS Service
Transform:
  - AWS::Serverless-2016-10-31
#  - AWS::CodeDeployBlueGreen

#Hooks:
#  CodeDeployBlueGreenHook:
#    Properties:
#      TrafficRoutingConfig:
#        Type: TimeBasedCanary
#        TimeBasedCanary:
#          StepPercentage: 15
#          BakeTimeMins: 5
#      Applications:
#        - Target:
#            Type: 'AWS::ECS::Service'
#            LogicalID: ContainerService
#          ECSAttributes:
#            TaskDefinitions:
#              - BlueTaskDefinition
#              - GreenTaskDefinition
#            TaskSets:
#              - BlueTaskSet
#              - GreenTaskSet
#            TrafficRouting:
#              ProdTrafficRoute:
#                Type: 'AWS::ElasticLoadBalancingV2::Listener'
#                LogicalID: ApplicationLoadBalancerListener
#              TargetGroups:
#                - ApplicationLoadBalancerTargetGroupBlue
#                - ApplicationLoadBalancerTargetGroupGreen
#    Type: 'AWS::CodeDeploy::BlueGreen'

Parameters:
  Environment:
    Description: "The name of the environment to deploy to"
    Type: "String"
    Default: build
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"

  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
    Default: "vpc-enhanced"

  RedisStackName:
    Description: >
      The name of the stack that defines the Redis cluster
    Type: String
    Default: "shared-redis"

  ProductTagValue:
    Description: Value for the Product Tag
    Type: String
    Default: "GOV.UK Sign In"

  OwnerTagValue:
    Description: Value for the Owner Tag
    Type: String
    Default: "govuk-accounts-tech@digital.cabinet-office.gov.uk"

  SourceTagValue:
    Description: Value for the Source Tag
    Type: String
    Default: "alphagov/di-authentication-account-management/deploy/template.yaml"

  CodeSigningConfigArn:
    Type: String
    Description: "The ARN of the Code Signing Config to use, provided by the deployment pipeline"
    Default: "none"

  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Mappings:
  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

Resources:
  #
  # ECS Service
  #

  ###

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-ECSCluster"
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ExecutionRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: CreateLogGroup
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*" #TODO Update to specific log groups
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ExecutionRole"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-TaskRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-TaskRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                Resource:
                 - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*"
                 - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${RedisStackName}/Cluster/*"
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:/${AWS::StackName}/Config/Publishing/API/Key"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:/${AWS::StackName}/Config/Session/Secret"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:/${RedisStackName}/Config/Cache/Password"
              - Effect: Allow
                Action:
                  - "kms:Sign"
                  - "kms:GetPublicKey"
                Resource:
                  !Join
                  - ""
                  - - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/"
                    - !Sub "{{resolve:ssm:/${AWS::StackName}/KMS/JwtSigningKey/Id}}"

      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskRole"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  ECSClusterNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: !Sub "The name of the ${AWS::StackName} ECS cluster"
      Name: !Sub "/${AWS::StackName}/ECS/Cluster"
      Type: String
      Value: !Ref ECSCluster
      Tags:
        Product: !Ref ProductTagValue
        System: Accounts
        Environment: !Ref Environment
        Owner: !Ref OwnerTagValue
        Source: !Ref SourceTagValue
        Application: Shared

  ###

  ContainerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentController:
        Type: EXTERNAL
      PropagateTags: SERVICE
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerService"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared
    DependsOn: ApplicationLoadBalancerListener

  ContainerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to access the Container Service
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ContainerService
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      SecurityGroupIngress:
        - Description: Allow traffic from the load balancer on port 6001
          SourceSecurityGroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 6001
          ToPort: 6001
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ContainerServiceSecurityGroup"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  #
  # Fargate tasks
  #

  BlueTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-BlueTaskDefinition"
          Image: 301577035144.dkr.ecr.eu-west-2.amazonaws.com/app-container-repository-containerrepository-neycck3munxf:3522a772389d8b14846f3d06e1a20e444fb65761 #App Image
          PortMappings:
            - ContainerPort: 6001
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${AWS::StackName}/BlueTaskDefinition"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          Environment:
            - Name: "NODE_ENV"
              Value: "development"
            - Name: "APP_ENV"
              Value: !Sub "${Environment}"
            - Name: "FARGATE"
              Value: "1"
            - Name: "API_BASE_URL"
              Value: "https://oidc.build.account.gov.uk" #TODO Fill when value is available
            - Name: "AM_API_BASE_URL"
              Value: "https://manage.build.account.gov.uk" #TODO Fill when value is available
            - Name: "BASE_URL"
              Value: "manage.build.account.gov.uk" #TODO Fill when value is available
            - Name: "OIDC_CLIENT_ID"
              Value: "RqFZ83csmS4Mi4Y7s7ohD9-ekwU" #TODO Fill when value is available
            - Name: "OIDC_CLIENT_SCOPES"
              Value: "openid phone email am offline_access govuk-account" #TODO Fill when value is available
            - Name: "SESSION_EXPIRY"
              Value: "1800000"
            - Name: "SESSION_SECRET"
              Value: !Sub '{{resolve:secretsmanager:${SessionSecret}}}'
            - Name: "AM_YOUR_ACCOUNT_URL"
              Value: "https://build.account.gov.uk"
            - Name: "GTM_ID"
              Value: "" #TODO Fill when value is available
            - Name: "GOV_ACCOUNTS_PUBLISHING_API_URL"
              Value: "https://www.build.publishing.service.gov.uk/account/home" #TODO Fill when value is available
            - Name: "GOV_ACCOUNTS_PUBLISHING_API_TOKEN"
              Value: "tbc" #TODO Fill when value is available
            - Name: "SUPPORT_INTERNATIONAL_NUMBERS"
              Value: "0"
            - Name: "SUPPORT_LANGUAGE_CY"
              Value: "1"
            - Name: "AUTH_FRONTEND_URL"
              Value: "https://sigin.build.account.gov.uk" #TODO Fill when value is available
            - Name: "ANALYTICS_COOKIE_DOMAIN"
              Value: "build.account.gov.uk" #TODO Fill when value is available
            - Name: "REDIS_KEY"
              Value: !Ref RedisStackName
            - Name: "REDIS_HOST"
              Value: !Sub '{{resolve:ssm:${Environment}-${RedisStackName}-redis-master-host}}'
            - Name: "REDIS_PORT"
              Value: !Sub '{{resolve:ssm:${Environment}-${RedisStackName}-redis-master-port}}'
            - Name: "KMS_KEY_ID"
              Value: !Sub "{{resolve:ssm:/${AWS::StackName}/KMS/JwtSigningKey/Id}}"
            - Name: "SERVICE_DOMAIN"
              Value: "" #TODO Fill when value is available
            - Name: "LOG_LEVEL"
              Value: "debug"

#            - Name: "NODE_ENV"
#              Value: "development" #TODO Make as parameter
#            - Name: "APP_ENV"
#              Value: !Sub "${Environment}"
#            - Name: "FARGATE"
#              Value: "1"
#            - Name: "API_BASE_URL"
#              Value: !Sub "https://oidc.${Environment}.account.gov.uk" # TODO Ternary if production then.. else current one set
#            - Name: "AM_API_BASE_URL"
#              Value: !Sub "https://settings.${Environment}.account.gov.uk" # TODO Ternary if prod just build.account.gov.uk else environment specified as current
#            - Name: "BASE_URL"
#              Value: !Sub "settings.${Environment}.account.gov.uk" # TODO Ternary if prod just build.account.gov.uk else environment specified as current
#            - Name: "OIDC_CLIENT_ID"
#              Value: !Sub "{{resolve:ssm:/${AWS::StackName}/Config/OIDC/Client/Id}}"
#            - Name: "OIDC_CLIENT_SCOPES"
#              Value: "openid phone email am offline_access govuk-account" #TODO Make as parameter
#            - Name: "SESSION_EXPIRY"
#              Value: "1800000"
#            - Name: "SESSION_SECRET"
#              Value: !Sub "{{resolve:secretsmanager:${SessionSecret}}}"
#            - Name: "AM_YOUR_ACCOUNT_URL"
#              Value: !Sub "https://${Environment}.account.gov.uk" # TODO Ternary if prod just build.account.gov.uk else environment specified as current
#            - Name: "GTM_ID"
#              Value: !Sub "{{resolve:ssm:/${AWS::StackName}/Config/GTM/Id}}"
#            - Name: "GOV_ACCOUNTS_PUBLISHING_API_URL"
#              Value: !Sub "https://www.${Environment}.publishing.service.gov.uk/account/home" #TODO Ternary if prod just build.publishing.service.gov.uk else environment specified as current
#            - Name: "GOV_ACCOUNTS_PUBLISHING_API_TOKEN"
#              Value: !Sub "{{resolve:secretsmanager:/${AWS::StackName}/Config/Publishing/API/Key}}"
#            - Name: "SUPPORT_INTERNATIONAL_NUMBERS"
#              Value: "0"
#            - Name: "SUPPORT_LANGUAGE_CY"
#              Value: "1"
#            - Name: "AUTH_FRONTEND_URL"
#              Value: !Sub "https://sigin.${Environment}.account.gov.uk" #TODO Ternary if prod just build.publishing.service.gov.uk else environment specified as current
#            - Name: "ANALYTICS_COOKIE_DOMAIN"
#              Value: !Sub "${Environment}.account.gov.uk" ##TODO Ternary if prod
#            - Name: "REDIS_KEY"
#              Value: !Ref RedisStackName
#            - Name: "REDIS_HOST"
#              Value: !Sub "{{resolve:ssm:${Environment}-${RedisStackName}-redis-master-host}}"
#            - Name: "REDIS_PORT"
#              Value: !Sub "{{resolve:ssm:${Environment}-${RedisStackName}-redis-master-port}}"
#            - Name: "KMS_KEY_ID"
#              Value: !Sub "{{resolve:ssm:/${AWS::StackName}/KMS/JwtSigningKey/Id}}"
#            - Name: "SERVICE_DOMAIN"
#              Value: "" #TODO Fill when value is available
#            - Name: "LOG_LEVEL"
#              Value: "debug" #TODO Turn into parameter
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      Family: !Sub "${AWS::StackName}-BlueTaskDefinition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-BlueTaskDefinition"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared
    DependsOn: SessionSecret

  TaskDefinitionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}/service"
      RetentionInDays: 1
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  SessionSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "/${AWS::StackName}/Config/Session/Secret"
      Description: !Sub Random password for the ${AWS::StackName} session secret
      GenerateSecretString:
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: true
        ExcludeUppercase: false
        IncludeSpace: false
        RequireEachIncludedType: true
        PasswordLength: 32
      KmsKeyId: !GetAtt SecretsKmsKey.Arn
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-SessionSecret"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  SecretsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "KMS key used to protect secrets data in ${AWS::StackName}"
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${AWS::StackName}/Config/Session/Secret*"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecretsKmsKey"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  SecretsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-SecretsKmsKey"
      TargetKeyId: !GetAtt SecretsKmsKey.Arn

  #
  # API Gateway
  #

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-ApiGateway"
      ProtocolType: HTTP
      Tags:
        Product: !Ref ProductTagValue
        System: Accounts
        Environment: !Ref Environment
        Name: !Sub "${AWS::StackName}-ApiGateway"
        Owner: !Ref OwnerTagValue
        Source: !Ref SourceTagValue
        Application: Shared

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref ApplicationLoadBalancerListener
      PayloadFormatVersion: 1.0

  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${ApiGatewayIntegration}"

  ApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      AutoDeploy: true
      AccessLogSettings:
        Format: "$context.requestId $context.httpMethod $context.path"
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
      Tags:
        Product: !Ref ProductTagValue
        System: Accounts
        Environment: !Ref Environment
        Name: !Sub "${AWS::StackName}-ApiDefaultStage"
        Owner: !Ref OwnerTagValue
        Source: !Ref SourceTagValue
        Application: Shared

  #
  # Load balancing
  #

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Type: application
      SecurityGroups:
        - !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-ProtectedSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-ProtectedSubnetIdB"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "true"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancer"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  ApplicationLoadBalancerTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: 6001
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      Port: 6001
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Matcher:
        HttpCode: "200"
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: "5"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerTargetGroupBlue"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  ApplicationLoadBalancerTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: 6001
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      Port: 6001
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Matcher:
        HttpCode: "200"
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: "5"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerTargetGroupGreen"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled.
      DefaultActions:
        - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroupBlue
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroupBlue
                Weight: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 1

  BlueTaskSet:
    Type: 'AWS::ECS::TaskSet'
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ContainerServiceSecurityGroup.GroupId
          Subnets:
          - Fn::ImportValue:
              !Sub "${VpcStackName}-ProtectedSubnetIdA"
          - Fn::ImportValue:
              !Sub "${VpcStackName}-ProtectedSubnetIdB"
      PlatformVersion: 1.4.0
      Scale:
        Unit: PERCENT
        Value: 100
      Service: !Ref ContainerService
      TaskDefinition: !Ref BlueTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub "${AWS::StackName}-BlueTaskDefinition"
          ContainerPort: 6001
          TargetGroupArn: !Ref ApplicationLoadBalancerTargetGroupBlue
  PrimaryTaskSet:
    Type: 'AWS::ECS::PrimaryTaskSet'
    Properties:
      Cluster: !Ref ECSCluster
      Service: !Ref ContainerService
      TaskSetId: !GetAtt
        - BlueTaskSet
        - Id

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Application Load Balancer
      GroupName: !Join
        - "-"
        - - !Ref AWS::StackName
          - ApplicationLoadBalancer
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ApplicationLoadBalancerSecurityGroup"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  ApplicationLoadBalancerSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      CidrIp: 0.0.0.0/0
      Description: Allow traffic from anyone on port 80
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  ApplicationLoadBalancerSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt ApplicationLoadBalancerSecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt ContainerServiceSecurityGroup.GroupId
      Description: Allow traffic to Container Service on port 6001
      IpProtocol: tcp
      FromPort: 6001
      ToPort: 6001

  #
  # Logging
  #

  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/apigateway/${AWS::StackName}/access"
      RetentionInDays: 7
      KmsKeyId: !GetAtt LoggingKmsKey.Arn
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: ApiGatewayAccessLogGroup
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn":
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${AWS::StackName}/service"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/apigateway/${AWS::StackName}/access"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-LoggingKmsKey"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared

  LoggingKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-LoggingKmsKey"
      TargetKeyId: !GetAtt LoggingKmsKey.Arn

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_18:This is the access logs bucket. It should not log itself.
      BucketName: !Join
        - "-"
        - - !Ref AWS::StackName
          - logs
          - Fn::Select:
              - 4
              - Fn::Split:
                  - '-'
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - /
                          - Ref: AWS::StackId
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: Accounts
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-accesslogs"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue
        - Key: Application
          Value: Shared
        - Key: CheckovRulesToSkip
          Value: CKV_AWS_18

  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLoadBalancerToLogToS3
            Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              Bool:
                "aws:SecureTransport": true
          - Sid: AllowAwsLogDeliveryToLogToS3
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
                "aws:SourceAccount": !Ref AWS::AccountId
              Bool:
                "aws:SecureTransport": true
          - Sid: AllowAwsLogDeliveryToReadBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !GetAtt AccessLogsBucket.Arn
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
              Bool:
                "aws:SecureTransport": true

Outputs:
  ApiGatewayEndpoint:
    Description: The base URI for this application.
    Value: !GetAtt ApiGateway.ApiEndpoint
