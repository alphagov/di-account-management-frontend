/* tslint:disable */
/* eslint-disable */
/**
 * Method Management API
 * Method Management API
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthAppMethod
 */
export interface AuthAppMethod {
    /**
     * 
     * @type {string}
     * @memberof AuthAppMethod
     */
    'mfaMethodType'?: AuthAppMethodMfaMethodTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthAppMethod
     */
    'credential'?: string;
}

export const AuthAppMethodMfaMethodTypeEnum = {
    AuthApp: 'AUTH_APP'
} as const;

export type AuthAppMethodMfaMethodTypeEnum = typeof AuthAppMethodMfaMethodTypeEnum[keyof typeof AuthAppMethodMfaMethodTypeEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const MethodTypeEnum = {
    Sms: 'SMS',
    AuthApp: 'AUTH_APP'
} as const;

export type MethodTypeEnum = typeof MethodTypeEnum[keyof typeof MethodTypeEnum];


/**
 * 
 * @export
 * @interface MfaMethod
 */
export interface MfaMethod {
    /**
     * 
     * @type {number}
     * @memberof MfaMethod
     */
    'mfaIdentifier'?: number;
    /**
     * 
     * @type {PriorityEnum}
     * @memberof MfaMethod
     */
    'priorityIdentifier': PriorityEnum;
    /**
     * 
     * @type {MfaMethodMethod}
     * @memberof MfaMethod
     */
    'method': MfaMethodMethod;
    /**
     * 
     * @type {boolean}
     * @memberof MfaMethod
     */
    'methodVerified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MfaMethod
     */
    'smsPhoneNumber'?: string;
}


/**
 * 
 * @export
 * @interface MfaMethodCreate
 */
export interface MfaMethodCreate {
    /**
     * 
     * @type {PriorityEnum}
     * @memberof MfaMethodCreate
     */
    'priorityIdentifier': PriorityEnum;
    /**
     * 
     * @type {MethodTypeEnum}
     * @memberof MfaMethodCreate
     */
    'mfaMethodType': MethodTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MfaMethodCreate
     */
    'endPoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof MfaMethodCreate
     */
    'credential'?: string;
}


/**
 * 
 * @export
 * @interface MfaMethodCreateRequest
 */
export interface MfaMethodCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof MfaMethodCreateRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof MfaMethodCreateRequest
     */
    'credential': string;
    /**
     * 
     * @type {string}
     * @memberof MfaMethodCreateRequest
     */
    'otp': string;
    /**
     * 
     * @type {MfaMethodCreate}
     * @memberof MfaMethodCreateRequest
     */
    'mfaMethod': MfaMethodCreate;
}
/**
 * @type MfaMethodMethod
 * @export
 */
export type MfaMethodMethod = AuthAppMethod | SmsMethod;

/**
 * 
 * @export
 * @interface MfaMethodUpdate
 */
export interface MfaMethodUpdate {
    /**
     * 
     * @type {number}
     * @memberof MfaMethodUpdate
     */
    'mfaIdentifier': number;
    /**
     * 
     * @type {PriorityEnum}
     * @memberof MfaMethodUpdate
     */
    'priorityIdentifier': PriorityEnum;
    /**
     * 
     * @type {MethodTypeEnum}
     * @memberof MfaMethodUpdate
     */
    'mfaMethodType': MethodTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MfaMethodUpdate
     */
    'credential'?: string;
    /**
     * 
     * @type {string}
     * @memberof MfaMethodUpdate
     */
    'endPoint'?: string;
}


/**
 * 
 * @export
 * @interface MfaMethodUpdateRequest
 */
export interface MfaMethodUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MfaMethodUpdateRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof MfaMethodUpdateRequest
     */
    'otp': string;
    /**
     * 
     * @type {MfaMethodUpdate}
     * @memberof MfaMethodUpdateRequest
     */
    'mfaMethod': MfaMethodUpdate;
}
/**
 * 
 * @export
 * @interface MfaSearchRequest
 */
export interface MfaSearchRequest {
    /**
     * 
     * @type {string}
     * @memberof MfaSearchRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'pointer'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PriorityEnum = {
    Default: 'DEFAULT',
    Backup: 'BACKUP'
} as const;

export type PriorityEnum = typeof PriorityEnum[keyof typeof PriorityEnum];


/**
 * 
 * @export
 * @interface ProblemDetail
 */
export interface ProblemDetail {
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'resource'?: string;
    /**
     * 
     * @type {ProblemDetailExtension}
     * @memberof ProblemDetail
     */
    'extension'?: ProblemDetailExtension;
}
/**
 * 
 * @export
 * @interface ProblemDetailExtension
 */
export interface ProblemDetailExtension {
    /**
     * 
     * @type {ProblemDetailExtensionError}
     * @memberof ProblemDetailExtension
     */
    'error'?: ProblemDetailExtensionError;
}
/**
 * 
 * @export
 * @interface ProblemDetailExtensionError
 */
export interface ProblemDetailExtensionError {
    /**
     * 
     * @type {number}
     * @memberof ProblemDetailExtensionError
     */
    'code'?: ProblemDetailExtensionErrorCodeEnum;
}

export const ProblemDetailExtensionErrorCodeEnum = {
    NUMBER_1056: 1056,
    NUMBER_1057: 1057,
    NUMBER_1058: 1058
} as const;

export type ProblemDetailExtensionErrorCodeEnum = typeof ProblemDetailExtensionErrorCodeEnum[keyof typeof ProblemDetailExtensionErrorCodeEnum];

/**
 * 
 * @export
 * @interface SmsMethod
 */
export interface SmsMethod {
    /**
     * 
     * @type {string}
     * @memberof SmsMethod
     */
    'mfaMethodType'?: SmsMethodMfaMethodTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SmsMethod
     */
    'endPoint'?: string;
}

export const SmsMethodMfaMethodTypeEnum = {
    Sms: 'SMS'
} as const;

export type SmsMethodMfaMethodTypeEnum = typeof SmsMethodMfaMethodTypeEnum[keyof typeof SmsMethodMfaMethodTypeEnum];

/**
 * 
 * @export
 * @interface ValidationProblem
 */
export interface ValidationProblem {
    /**
     * 
     * @type {string}
     * @memberof ValidationProblem
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationProblem
     */
    'title'?: string;
    /**
     * 
     * @type {Array<Error>}
     * @memberof ValidationProblem
     */
    'errors'?: Array<Error>;
}

/**
 * Class2FAManagementApi - axios parameter creator
 * @export
 */
export const Class2FAManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an mfa method. A new MFA Method cannot be created as PRIMARY, it must be SECONDARY and promoted at a later stage
         * @param {MfaMethodCreateRequest} mfaMethodCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaMethodCreate: async (mfaMethodCreateRequest: MfaMethodCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mfaMethodCreateRequest' is not null or undefined
            assertParamExists('mfaMethodCreate', 'mfaMethodCreateRequest', mfaMethodCreateRequest)
            const localVarPath = `/mfa-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mfaMethodCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the mfa method identified by the mfa identifier. Cannot delete an identifier that is \'PRIMARY\'.
         * @param {string} mfaIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaMethodDelete: async (mfaIdentifier: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mfaIdentifier' is not null or undefined
            assertParamExists('mfaMethodDelete', 'mfaIdentifier', mfaIdentifier)
            const localVarPath = `/mfa-methods/{mfaIdentifier}`
                .replace(`{${"mfaIdentifier"}}`, encodeURIComponent(String(mfaIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve mfaMethods that match criteria in the MFASearchRequest in the request body
         * @summary Retrieves the list of MFA Methods for a user
         * @param {MfaSearchRequest} mfaSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaMethodsRetrieve: async (mfaSearchRequest: MfaSearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mfaSearchRequest' is not null or undefined
            assertParamExists('mfaMethodsRetrieve', 'mfaSearchRequest', mfaSearchRequest)
            const localVarPath = `/mfa-methods/retrieve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mfaSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an mfa method. If the MFA method is updated to \'PRIMARY\', the current \'PRIMARY\' gets relegated to secondary.
         * @param {string} mfaIdentifier 
         * @param {MfaMethodUpdateRequest} mfaMethodUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaMethodsUpdate: async (mfaIdentifier: string, mfaMethodUpdateRequest: MfaMethodUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mfaIdentifier' is not null or undefined
            assertParamExists('mfaMethodsUpdate', 'mfaIdentifier', mfaIdentifier)
            // verify required parameter 'mfaMethodUpdateRequest' is not null or undefined
            assertParamExists('mfaMethodsUpdate', 'mfaMethodUpdateRequest', mfaMethodUpdateRequest)
            const localVarPath = `/mfa-methods/{mfaIdentifier}`
                .replace(`{${"mfaIdentifier"}}`, encodeURIComponent(String(mfaIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mfaMethodUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class2FAManagementApi - functional programming interface
 * @export
 */
export const Class2FAManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class2FAManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an mfa method. A new MFA Method cannot be created as PRIMARY, it must be SECONDARY and promoted at a later stage
         * @param {MfaMethodCreateRequest} mfaMethodCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaMethodCreate(mfaMethodCreateRequest: MfaMethodCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mfaMethodCreate(mfaMethodCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Class2FAManagementApi.mfaMethodCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes the mfa method identified by the mfa identifier. Cannot delete an identifier that is \'PRIMARY\'.
         * @param {string} mfaIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaMethodDelete(mfaIdentifier: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MfaMethod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mfaMethodDelete(mfaIdentifier, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Class2FAManagementApi.mfaMethodDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve mfaMethods that match criteria in the MFASearchRequest in the request body
         * @summary Retrieves the list of MFA Methods for a user
         * @param {MfaSearchRequest} mfaSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaMethodsRetrieve(mfaSearchRequest: MfaSearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MfaMethod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mfaMethodsRetrieve(mfaSearchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Class2FAManagementApi.mfaMethodsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an mfa method. If the MFA method is updated to \'PRIMARY\', the current \'PRIMARY\' gets relegated to secondary.
         * @param {string} mfaIdentifier 
         * @param {MfaMethodUpdateRequest} mfaMethodUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mfaMethodsUpdate(mfaIdentifier: string, mfaMethodUpdateRequest: MfaMethodUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mfaMethodsUpdate(mfaIdentifier, mfaMethodUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['Class2FAManagementApi.mfaMethodsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * Class2FAManagementApi - factory interface
 * @export
 */
export const Class2FAManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class2FAManagementApiFp(configuration)
    return {
        /**
         * Creates an mfa method. A new MFA Method cannot be created as PRIMARY, it must be SECONDARY and promoted at a later stage
         * @param {MfaMethodCreateRequest} mfaMethodCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaMethodCreate(mfaMethodCreateRequest: MfaMethodCreateRequest, options?: any): AxiosPromise<MfaMethod> {
            return localVarFp.mfaMethodCreate(mfaMethodCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the mfa method identified by the mfa identifier. Cannot delete an identifier that is \'PRIMARY\'.
         * @param {string} mfaIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaMethodDelete(mfaIdentifier: string, options?: any): AxiosPromise<Array<MfaMethod>> {
            return localVarFp.mfaMethodDelete(mfaIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve mfaMethods that match criteria in the MFASearchRequest in the request body
         * @summary Retrieves the list of MFA Methods for a user
         * @param {MfaSearchRequest} mfaSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaMethodsRetrieve(mfaSearchRequest: MfaSearchRequest, options?: any): AxiosPromise<Array<MfaMethod>> {
            return localVarFp.mfaMethodsRetrieve(mfaSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an mfa method. If the MFA method is updated to \'PRIMARY\', the current \'PRIMARY\' gets relegated to secondary.
         * @param {string} mfaIdentifier 
         * @param {MfaMethodUpdateRequest} mfaMethodUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mfaMethodsUpdate(mfaIdentifier: string, mfaMethodUpdateRequest: MfaMethodUpdateRequest, options?: any): AxiosPromise<MfaMethod> {
            return localVarFp.mfaMethodsUpdate(mfaIdentifier, mfaMethodUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class2FAManagementApi - object-oriented interface
 * @export
 * @class Class2FAManagementApi
 * @extends {BaseAPI}
 */
export class Class2FAManagementApi extends BaseAPI {
    /**
     * Creates an mfa method. A new MFA Method cannot be created as PRIMARY, it must be SECONDARY and promoted at a later stage
     * @param {MfaMethodCreateRequest} mfaMethodCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAManagementApi
     */
    public mfaMethodCreate(mfaMethodCreateRequest: MfaMethodCreateRequest, options?: RawAxiosRequestConfig) {
        return Class2FAManagementApiFp(this.configuration).mfaMethodCreate(mfaMethodCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the mfa method identified by the mfa identifier. Cannot delete an identifier that is \'PRIMARY\'.
     * @param {string} mfaIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAManagementApi
     */
    public mfaMethodDelete(mfaIdentifier: string, options?: RawAxiosRequestConfig) {
        return Class2FAManagementApiFp(this.configuration).mfaMethodDelete(mfaIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve mfaMethods that match criteria in the MFASearchRequest in the request body
     * @summary Retrieves the list of MFA Methods for a user
     * @param {MfaSearchRequest} mfaSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAManagementApi
     */
    public mfaMethodsRetrieve(mfaSearchRequest: MfaSearchRequest, options?: RawAxiosRequestConfig) {
        return Class2FAManagementApiFp(this.configuration).mfaMethodsRetrieve(mfaSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an mfa method. If the MFA method is updated to \'PRIMARY\', the current \'PRIMARY\' gets relegated to secondary.
     * @param {string} mfaIdentifier 
     * @param {MfaMethodUpdateRequest} mfaMethodUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAManagementApi
     */
    public mfaMethodsUpdate(mfaIdentifier: string, mfaMethodUpdateRequest: MfaMethodUpdateRequest, options?: RawAxiosRequestConfig) {
        return Class2FAManagementApiFp(this.configuration).mfaMethodsUpdate(mfaIdentifier, mfaMethodUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



